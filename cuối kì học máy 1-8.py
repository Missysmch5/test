{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: torch in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (2.3.1)\n",
      "Requirement already satisfied: pandas in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (2.2.2)\n",
      "Requirement already satisfied: numpy in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (1.26.4)\n",
      "Requirement already satisfied: transformers in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (4.42.4)\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (1.5.0)\n",
      "Requirement already satisfied: filelock in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from torch) (3.15.4)\n",
      "Requirement already satisfied: typing-extensions>=4.8.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from torch) (4.12.2)\n",
      "Requirement already satisfied: sympy in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from torch) (1.13.1)\n",
      "Requirement already satisfied: networkx in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from torch) (3.3)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from torch) (3.1.4)\n",
      "Requirement already satisfied: fsspec in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from torch) (2024.6.1)\n",
      "Requirement already satisfied: mkl<=2021.4.0,>=2021.1.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from torch) (2021.4.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from transformers) (0.24.0)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from transformers) (24.0)\n",
      "Requirement already satisfied: pyyaml>=5.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from transformers) (6.0.1)\n",
      "Requirement already satisfied: regex!=2019.12.17 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from transformers) (2024.5.15)\n",
      "Requirement already satisfied: requests in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: safetensors>=0.4.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from transformers) (0.4.3)\n",
      "Requirement already satisfied: tokenizers<0.20,>=0.19 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from transformers) (0.19.1)\n",
      "Requirement already satisfied: tqdm>=4.27 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from transformers) (4.66.4)\n",
      "Requirement already satisfied: scipy>=1.6.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (1.13.1)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (3.5.0)\n",
      "Requirement already satisfied: intel-openmp==2021.* in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from mkl<=2021.4.0,>=2021.1.1->torch) (2021.4.0)\n",
      "Requirement already satisfied: tbb==2021.* in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from mkl<=2021.4.0,>=2021.1.1->torch) (2021.13.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\mycomputer\\appdata\\roaming\\python\\python312\\site-packages (from tqdm>=4.27->transformers) (0.4.6)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from jinja2->torch) (2.1.5)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from requests->transformers) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from requests->transformers) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from requests->transformers) (2.2.2)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from requests->transformers) (2024.6.2)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from sympy->torch) (1.3.0)\n",
      "Requirement already satisfied: seaborn in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (0.13.2)\n",
      "Requirement already satisfied: numpy!=1.24.0,>=1.20 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (1.26.4)\n",
      "Requirement already satisfied: pandas>=1.2 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (2.2.2)\n",
      "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (3.9.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.2.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.53.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.5)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.0)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (10.3.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.1.2)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=1.2->seaborn) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=1.2->seaborn) (2024.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\mycomputer\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install torch pandas numpy transformers scikit-learn\n",
    "!pip install seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "from transformers import AutoModelForSequenceClassification, AutoTokenizer, Trainer, TrainingArguments\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ArticleId</th>\n",
       "      <th>Text</th>\n",
       "      <th>Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1833</td>\n",
       "      <td>worldcom ex-boss launches defence lawyers defe...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>154</td>\n",
       "      <td>german business confidence slides german busin...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1101</td>\n",
       "      <td>bbc poll indicates economic gloom citizens in ...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1976</td>\n",
       "      <td>lifestyle  governs mobile choice  faster  bett...</td>\n",
       "      <td>tech</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>917</td>\n",
       "      <td>enron bosses in $168m payout eighteen former e...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ArticleId                                               Text  Category\n",
       "0       1833  worldcom ex-boss launches defence lawyers defe...  business\n",
       "1        154  german business confidence slides german busin...  business\n",
       "2       1101  bbc poll indicates economic gloom citizens in ...  business\n",
       "3       1976  lifestyle  governs mobile choice  faster  bett...      tech\n",
       "4        917  enron bosses in $168m payout eighteen former e...  business"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Đọc dữ liệu\n",
    "df = pd.read_csv('BBC News Sample Solution.csv')\n",
    "df = pd.read_csv('BBC News Test.csv')\n",
    "df = pd.read_csv('BBC News Train.csv')\n",
    "\n",
    "# Kiểm tra dữ liệu\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Dataset:\n",
    "    def __init__(self, text, tokenizer, max_len):\n",
    "        self.text = text\n",
    "        self.tokenizer = tokenizer\n",
    "        self.max_len = max_len\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.text)\n",
    "\n",
    "    def __getitem__(self, item):\n",
    "        text = str(self.text[item])\n",
    "        inputs = self.tokenizer(\n",
    "            text, \n",
    "            max_length=self.max_len, \n",
    "            padding=\"max_length\", \n",
    "            truncation=True\n",
    "        )\n",
    "\n",
    "        ids = inputs[\"input_ids\"]\n",
    "        mask = inputs[\"attention_mask\"]\n",
    "        token_type_ids = inputs[\"token_type_ids\"]\n",
    "\n",
    "        return {\n",
    "            \"input_ids\": torch.tensor(ids, dtype=torch.long),\n",
    "            \"attention_mask\": torch.tensor(mask, dtype=torch.long),\n",
    "            \"token_type_ids\": torch.tensor(token_type_ids, dtype=torch.long),\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_predictions(model_path, max_len):\n",
    "    model = AutoModelForSequenceClassification.from_pretrained(model_path)\n",
    "    tokenizer = AutoTokenizer.from_pretrained(model_path)\n",
    "\n",
    "    model.to(\"cuda\")\n",
    "    model.eval()\n",
    "    \n",
    "    df = pd.read_csv(\"../input/learn-ai-bbc/BBC News Test.csv\")\n",
    "    \n",
    "    dataset = Dataset(text=df.Text.values, tokenizer=tokenizer, max_len=max_len)\n",
    "    data_loader = torch.utils.data.DataLoader(\n",
    "        dataset, batch_size=32, num_workers=4, pin_memory=True, shuffle=False\n",
    "    )\n",
    "\n",
    "    final_output = []\n",
    "\n",
    "    for b_idx, data in enumerate(data_loader):\n",
    "        with torch.no_grad():\n",
    "            for key, value in data.items():\n",
    "                data[key] = value.to(\"cuda\")\n",
    "            output = model(**data)\n",
    "            output = output.logits.detach().cpu().numpy()\n",
    "            final_output.extend(output)\n",
    "    \n",
    "    torch.cuda.empty_cache()\n",
    "    return np.vstack(final_output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "id_category_mapping = {\n",
    "  0: \"business\",\n",
    "  1: \"entertainment\",\n",
    "  2: \"politics\",\n",
    "  3: \"sport\",\n",
    "  4: \"tech\"\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub = pd.read_csv('E:/cuoikihocmay/sub/BBC News Sample Solution.csv')\n",
    "preds = np.random.rand(len(sub), 5)\n",
    "sub['Category'] = np.argmax(preds, axis=1)\n",
    "sub['Category'] = sub['Category'].map(id_category_mapping)\n",
    "sub.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ArticleId</th>\n",
       "      <th>Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1018</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1319</td>\n",
       "      <td>tech</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1138</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>459</td>\n",
       "      <td>sport</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1020</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ArticleId  Category\n",
       "0       1018  politics\n",
       "1       1319      tech\n",
       "2       1138  politics\n",
       "3        459     sport\n",
       "4       1020  business"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'business', 1: 'entertainment', 2: 'politics', 3: 'sport', 4: 'tech'}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "id_category_mapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.pipeline import Pipeline\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 24 candidates, totalling 120 fits\n",
      "Best Parameters: {'nb__alpha': 0.01, 'tfidf__max_df': 0.5, 'tfidf__ngram_range': (1, 1)}\n",
      "Overall Accuracy: 0.10204081632653061\n",
      "Overall Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "     business       0.10      1.00      0.19        15\n",
      "entertainment       0.00      0.00      0.00        31\n",
      "     politics       0.00      0.00      0.00        30\n",
      "        sport       0.00      0.00      0.00        32\n",
      "         tech       0.00      0.00      0.00        39\n",
      "\n",
      "     accuracy                           0.10       147\n",
      "    macro avg       0.02      0.20      0.04       147\n",
      " weighted avg       0.01      0.10      0.02       147\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "image/png": "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SefPn9eiRYtue89OnTppzpw5GjdunPbt26dJkybJx8dHBQsW1IIFCyRJBw4c0MmTJzV27FhJUnh4uGbOnKmJEydqz5496t+/v5555hmtX79e0rVEpk2bNmrRooV27typ7t2769VXX82sHxsAwIkxxAgA7oJhGFqzZo1WrFihPn366OzZs8qePbumTJliH1r0xRdfKDk5WVOmTJHNZpMkTZs2TTly5NC6devUuHFjffTRRxoyZIjatGkjSZo4caJWrFhxy/v+8ccf+uqrr7Rq1So1atRIklS0aFH7/hvDkYKDg5UjRw5J1yoO77zzjlavXq2wsDD7OT/99JMmTZqkunXrasKECSpWrJjGjBkjSSpVqpR+++03vffeexn4UwMA3AtIEAAgHZYuXSofHx8lJCQoOTlZTz31lEaMGKFevXopNDTUYd7Brl27dOjQIfn6+jpc4+rVqzp8+LAuXryokydPqlq1avZ92bJlU5UqVVINM7ph586dcnV1Vd26ddMc86FDh3T58mU9/PDDDu3x8fGqVKmSJGnfvn0OcUiyJxMAAGshQQCAdKhfv74mTJggd3d35cuXT9my/fNrNHv27A7HxsTEqHLlyvryyy9TXScoKOiu7u/l5ZXuc2JiYiRJ3333nfLnz++wz8PD467iAADcv0gQACAdsmfPruLFi6fp2AcffFDz5s1TcHCw/Pz8bnpM3rx5tWXLFtWpU0eSlJiYqG3btunBBx+86fGhoaFKTk7W+vXr7UOMUrpRwUhKSrK3lS1bVh4eHjp+/PgtKw9lypTRkiVLHNo2b9585zcJALjvMEkZADLJ008/rVy5cqlVq1b68ccfFRERoXXr1qlv3776888/JUkvvfSS3n33XS1evFj79+/Xiy++eNs1DEJCQtS5c2c9++yzWrx4sf2aX331lSSpcOHCstlsWrp0qc6ePauYmBj5+vpq0KBB6t+/v2bMmKHDhw9r+/bt+vjjjzVjxgxJ0vPPP6+DBw/q5Zdf1oEDBzR79mxNnz49s39EAAAnRIIAAJnE29tbGzZsUKFChdSmTRuVKVNG3bp109WrV+0VhYEDB6pjx47q3LmzwsLC5Ovrq8cee+y2150wYYLatWunF198UaVLl1aPHj0UGxsrScqfP79GjhypV199Vblz51bv3r0lSW+++aaGDh2q8PBwlSlTRk2bNtV3332nIkWKSJIKFSqkBQsWaPHixapYsaImTpyod955JxN/OgAAZ2UzbjUTDgAAAIDlUEEAAAAAYEeCAAAAAMCOBAEAAACAHQkCAAAAADsSBAAAAAB2JAgAAAAA7EgQAAAAANiRIAAAAACwI0EAAAAAYEeCAAAAAMCOBAEAAACA3f8BUy5yCyq+kqUAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Category: sport\n",
      "Accuracy: 0.782312925170068\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       False       0.78      1.00      0.88       115\n",
      "        True       0.00      0.00      0.00        32\n",
      "\n",
      "    accuracy                           0.78       147\n",
      "   macro avg       0.39      0.50      0.44       147\n",
      "weighted avg       0.61      0.78      0.69       147\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Category: tech\n",
      "Accuracy: 0.7346938775510204\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       False       0.73      1.00      0.85       108\n",
      "        True       0.00      0.00      0.00        39\n",
      "\n",
      "    accuracy                           0.73       147\n",
      "   macro avg       0.37      0.50      0.42       147\n",
      "weighted avg       0.54      0.73      0.62       147\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Category: business\n",
      "Accuracy: 0.10204081632653061\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       False       0.00      0.00      0.00       132\n",
      "        True       0.10      1.00      0.19        15\n",
      "\n",
      "    accuracy                           0.10       147\n",
      "   macro avg       0.05      0.50      0.09       147\n",
      "weighted avg       0.01      0.10      0.02       147\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Category: entertainment\n",
      "Accuracy: 0.7891156462585034\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       False       0.79      1.00      0.88       116\n",
      "        True       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.79       147\n",
      "   macro avg       0.39      0.50      0.44       147\n",
      "weighted avg       0.62      0.79      0.70       147\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "c:\\Users\\MyComputer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1517: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Category: politics\n",
      "Accuracy: 0.7959183673469388\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       False       0.80      1.00      0.89       117\n",
      "        True       0.00      0.00      0.00        30\n",
      "\n",
      "    accuracy                           0.80       147\n",
      "   macro avg       0.40      0.50      0.44       147\n",
      "weighted avg       0.63      0.80      0.71       147\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 features for class business:\n",
      "   584\n",
      "   1296\n",
      "   2132\n",
      "   1286\n",
      "   60\n",
      "   2125\n",
      "   1691\n",
      "   2106\n",
      "   625\n",
      "   100\n",
      "Top 10 features for class entertainment:\n",
      "   414\n",
      "   43\n",
      "   446\n",
      "   45\n",
      "   1461\n",
      "   459\n",
      "   1448\n",
      "   469\n",
      "   1496\n",
      "   48\n",
      "Top 10 features for class politics:\n",
      "   586\n",
      "   1671\n",
      "   2146\n",
      "   1679\n",
      "   599\n",
      "   2136\n",
      "   1685\n",
      "   608\n",
      "   1743\n",
      "   2018\n",
      "Top 10 features for class sport:\n",
      "   457\n",
      "   149\n",
      "   1484\n",
      "   1477\n",
      "   1470\n",
      "   501\n",
      "   1422\n",
      "   1420\n",
      "   1501\n",
      "   999\n",
      "Top 10 features for class tech:\n",
      "   13\n",
      "   1329\n",
      "   59\n",
      "   1313\n",
      "   592\n",
      "   131\n",
      "   598\n",
      "   1660\n",
      "   1319\n",
      "   1423\n"
     ]
    }
   ],
   "source": [
    "# Load the data\n",
    "data = pd.read_csv('E:/cuoikihocmay/sub/BBC News Sample Solution.csv')\n",
    "X = data['ArticleId'].astype(str)\n",
    "y = data['Category']\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create a pipeline with TfidfVectorizer and MultinomialNB\n",
    "pipeline = Pipeline([\n",
    "    ('tfidf', TfidfVectorizer(stop_words='english', max_df=0.7)),\n",
    "    ('nb', MultinomialNB())\n",
    "])\n",
    "\n",
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'tfidf__max_df': [0.5, 0.7, 0.9],\n",
    "    'tfidf__ngram_range': [(1, 1), (1, 2)],\n",
    "    'nb__alpha': [0.01, 0.1, 1, 10]\n",
    "}\n",
    "\n",
    "# Perform grid search\n",
    "grid_search = GridSearchCV(pipeline, param_grid, cv=5, n_jobs=-1, verbose=1)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best model\n",
    "best_model = grid_search.best_estimator_\n",
    "\n",
    "# Make predictions\n",
    "y_pred = best_model.predict(X_test)\n",
    "\n",
    "# Evaluate the model\n",
    "print(\"Best Parameters:\", grid_search.best_params_)\n",
    "print(\"Overall Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"Overall Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Confusion matrix\n",
    "conf_mat = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize=(10, 7))\n",
    "sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues', xticklabels=best_model.named_steps['nb'].classes_, yticklabels=best_model.named_steps['nb'].classes_)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('Overall Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Evaluate performance by category\n",
    "unique_labels = y.unique()\n",
    "category_performance = {}\n",
    "\n",
    "for label in unique_labels:\n",
    "    y_test_label = (y_test == label)\n",
    "    y_pred_label = (y_pred == label)\n",
    "    \n",
    "    accuracy_label = accuracy_score(y_test_label, y_pred_label)\n",
    "    report_label = classification_report(y_test_label, y_pred_label, output_dict=True)\n",
    "    \n",
    "    category_performance[label] = {\n",
    "        'accuracy': accuracy_label,\n",
    "        'report': report_label\n",
    "    }\n",
    "    \n",
    "    print(f\"Category: {label}\")\n",
    "    print(f\"Accuracy: {accuracy_label}\")\n",
    "    print(\"Classification Report:\")\n",
    "    print(classification_report(y_test_label, y_pred_label))\n",
    "    \n",
    "    # Plot confusion matrix for each category\n",
    "    conf_mat_label = confusion_matrix(y_test_label, y_pred_label)\n",
    "    plt.figure(figsize=(10, 7))\n",
    "    sns.heatmap(conf_mat_label, annot=True, fmt='d', cmap='Blues', xticklabels=['Not ' + label, label], yticklabels=['Not ' + label, label])\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.ylabel('Actual')    \n",
    "    plt.title(f'Confusion Matrix for {label}')\n",
    "    plt.show()\n",
    "\n",
    "# Feature Importance\n",
    "feature_names = best_model.named_steps['tfidf'].get_feature_names_out()\n",
    "feature_log_prob = best_model.named_steps['nb'].feature_log_prob_\n",
    "num_classes = len(best_model.named_steps['nb'].classes_)\n",
    "\n",
    "for i in range(num_classes):\n",
    "    top10 = np.argsort(feature_log_prob[i])[-10:]\n",
    "    print(f\"Top 10 features for class {best_model.named_steps['nb'].classes_[i]}:\")\n",
    "    for idx in top10:\n",
    "        print(f\"   {feature_names[idx]}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
